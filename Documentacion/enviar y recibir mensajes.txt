--SEND_MSG--

int send_msg(int socket, Operacion operacion)



--Argumentos y retorno--

socket: destinatario del mensaje

operacion: variable que contiene lo que se quiere enviar

retorno: EXIT_FAILURE o EXIT_SUCCESS



--Ejemplo--

Operacion op = iniciarConValores(); //Para iniciar los valores, ver mas adelante
int resultado = send_msg(socket, op);

if (resultado == EXIT_FAILURE)
	//Salio mal, hacer algo

free(input);










--RECV_MSG--

Operacion recv_msg(int socket)



--Argumentos y retorno--

socket: el emisor del mensaje

retorno: el mensaje operacion que se recibio. En caso de error, devuelve un enum ERROR



--Ejemplo--

Operacion resultado = recv_msg(socket);

switch(resultado.TipoDeMensaje){
	case TEXTO_PLANO:
		resultado.Argumentos.TEXTO_PLANO.texto; //Variable que contiene el texto de TEXTO_PLANO
		break;
	case REGISTRO:
		resultado.Argumentos.COMANDO.key;
		resultado.Argumentos.COMANDO.timestamp;
		resultado.Argumentos.COMANDO.value;
		break;
	case COMANDO:
		resultado.Argumentos.REGISTRO.comandoParseable;
		break;
	case ERROR:
		resultado.Argumentos.ERROR.mensajeError;
}

destruir_operacion(resultado);










--OPERACION--

La estructura operacion esta definida para que se pueda elegir uno de los siguientes enums:
TEXTO_PLANO,
REGISTRO,
COMANDO,
ERROR,
Y por cada enum, se pueden inicializar sus respectivos argumentos:
TEXTO_PLANO contiene un char* texto
REGISTRO contiene un timestamp_t timestamp, uint16_t key, char* value
COMANDO contiene un char* comandoParseable que mas adelante se deberia poder parsear y ser entendible
ERROR que contiene un char* mensajeError para informar detalles del error


--Ejemplo--

Operacion op;
op.TipoDeMensaje = ERROR;
op.Argumentos.ERROR.mensajeError = malloc(sizeof(char)*strlen("Hubo error"));
strcpy(op.Argumentos.ERROR.mensajeError, "Hubo error");