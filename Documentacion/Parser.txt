--PARSER--



--SINTAXIS ADMITIDA--

SELECT nombreTabla Key
INSERT nombreTabla key value timestamp (puede no tener timestamp, en ese caso hay que preguntar si es NULL)
CREATE nombreTabla tipoConsistencia numeroParticiones compactacionTime
DESCRIBE nombreTabla
DROP nombreTabla
JOURNAL
ADD MEMORY numero TO criterio
RUN path



--USO--
#include <parser/parsi_mod.h>
Comando parsed = parse("SELECT ejemploTabla ejemploKey");



--ATRIBUTOS--

parsed.argumentos.(SELECT o INSERT o CREATE o DESCRIBE o DROP).nombreTabla
parsed.argumentos.(SELECT o INSERT).key
parsed.argumentos.INSERT.value
parsed.argumentos.INSERT.timestamp (Es el unico que puede ser NULL)
parsed.argumentos.CREATE.tipoConsistencia
parsed.argumentos.CREATE.numeroParticiones
parsed.argumentos.CREATE.compactacionTime
parsed.argumentos.ADDMEMORY.numero
parsed.argumentos.ADDMEMORY.criterio
parsed.argumentos.RUN.path



--LIBERACION--

destruir_operacion(parsed);



--CODIGO DE EJEMPLO--

Comando parsed = parse("ADD MEMORY num1 TO crit1");
	//Comando parsed = parse("RUN unlugar");

    if(parsed.valido){
        switch(parsed.keyword){
            case SELECT:
                printf("SELECT\n");
                printf("nombreTabla: %s\n", parsed.argumentos.SELECT.nombreTabla);
                printf("key: %s\n", parsed.argumentos.SELECT.key);
                break;
            case INSERT:
                printf("INSERT\n");
                printf("nombreTabla: %s\n", parsed.argumentos.INSERT.nombreTabla);
                printf("key: %s\n", parsed.argumentos.INSERT.key);
                printf("value: %s\n", parsed.argumentos.INSERT.value);
                printf("timestamp (opcional): %s\n", parsed.argumentos.INSERT.timestamp);
                break;
            case CREATE:
                printf("CREATE\n");
                printf("nombreTabla: %s\n", parsed.argumentos.CREATE.nombreTabla);
                printf("tipoConsistencia: %s\n", parsed.argumentos.CREATE.tipoConsistencia);
                printf("numeroParticiones: %s\n", parsed.argumentos.CREATE.numeroParticiones);
                printf("compactacionTime: %s\n", parsed.argumentos.CREATE.compactacionTime);
                break;
            case DESCRIBE:
                printf("DESCRIBE\n");
                printf("nombreTabla: %s\n", parsed.argumentos.DESCRIBE.nombreTabla);
                break;
            case DROP:
            	printf("DROP\n");
                printf("nombreTabla: %s\n", parsed.argumentos.DROP.nombreTabla);
                break;
            case JOURNAL:
                printf("JOURNAL\nno posee argumentos\n");
                break;
            case ADDMEMORY:
            	printf("ADD MEMORY\n");
            	printf("numero: %s\n", parsed.argumentos.ADDMEMORY.numero);
            	printf("criterio: %s\n", parsed.argumentos.ADDMEMORY.criterio);
                break;
            case RUN:
            	printf("RUN\n");
            	printf("path: %s\n", parsed.argumentos.RUN.path);
                break;
            default:
                fprintf(stderr, "No se pude interpretar\n");
                exit(EXIT_FAILURE);
        }

        destruir_operacion(parsed);
    } else {
        fprintf(stderr, "La linea no es valida\n");
        exit(EXIT_FAILURE);
    }

